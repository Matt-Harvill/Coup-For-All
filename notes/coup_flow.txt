Once the game starts, the roles are assigned to everyone, and players are placed in a queue
For each turn someone is popped off the queue and pushed onto the end of the queue

If they don't make a move, a move will be made for them automatically
If they are inactive for two round in a row, they will be kicked and their roles will be flipped to show to everyone

When someone does an action that can be contested - pauses their turn. Once it is resolved (with the action
completing), they either get to continue or they have to end their turn. 


When someone is no longer in the game, remove them from players, but keep their userObj the same (so they can still watch the game)
When someone loses a role, the roles gets moved to an inactiveRoles array

If there was a callout -> someone lost a role for sure. Also, someone possibly has to get a new role from availRoles

The losingRole stage doesn't happen if no one calls out though


Add a game history to the game DB object
For the frontend -> only show like 6 recent actions


For switching roles, make it like the lose roles where it isn't automatic (looks weird and is too quick)


As of now, once a challenge happens, no more chance to block.
I will need to restructure everything such that only one target at a time and that the end of callout lets blocking for certain roles

At any given time there will only be one turnTarget - DONE
Possible stages: preCallout, callout, block (another callout), postCallout 
New names: selectAction, challengeRole, blockAction, loseAndOrSwap, completeAction

- Income -> preCallout
- ForeignAid -> preCallout, block (another callout), postCallout
- Tax -> preCallout, callout, postCallout
- Exchange -> preCallout, callout, postCallout
- Coup -> preCallout
- Steal -> preCallout, callout, block (another callout), postCallout
- Assassinate -> preCallout, callout (loseAndOrSwap), block (another callout (loseAndOrSwap)), postCallout (loseAndOrSwap)

prepareAssassinate could possibly halt the game if DB can't be committed to

